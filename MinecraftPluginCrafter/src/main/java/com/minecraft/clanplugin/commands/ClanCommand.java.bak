package com.minecraft.clanplugin.commands;

import com.minecraft.clanplugin.ClanPlugin;
import com.minecraft.clanplugin.models.Clan;
import com.minecraft.clanplugin.models.ClanMember;
import com.minecraft.clanplugin.models.ClanRole;
import com.minecraft.clanplugin.utils.ItemUtils;
import com.minecraft.clanplugin.utils.MessageUtils;
import org.bukkit.ChatColor;
import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.command.Command;
import org.bukkit.command.CommandExecutor;
import org.bukkit.command.CommandSender;
import org.bukkit.entity.Player;
import org.bukkit.inventory.Inventory;
import org.bukkit.inventory.ItemStack;

import java.util.ArrayList;
import java.util.List;
import java.util.Set;

/**
 * Command handler for all clan-related commands.
 */
public class ClanCommand implements CommandExecutor {

    private final ClanPlugin plugin;

    public ClanCommand(ClanPlugin plugin) {
        this.plugin = plugin;
    }

    @Override
    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {
        if (!(sender instanceof Player)) {
            sender.sendMessage(ChatColor.RED + "Only players can use clan commands!");
            return true;
        }

        Player player = (Player) sender;

        if (args.length == 0) {
            sendHelpMessage(player);
            return true;
        }

        String subCommand = args[0].toLowerCase();

        switch (subCommand) {
            case "create":
                return handleCreate(player, args);
            case "join":
                return handleJoin(player, args);
            case "leave":
                return handleLeave(player);
            case "info":
                return handleInfo(player, args);
            case "invite":
                return handleInvite(player, args);
            case "kick":
                return handleKick(player, args);
            case "promote":
                return handlePromote(player, args);
            case "demote":
                return handleDemote(player, args);
            case "sethome":
                return handleSetHome(player);
            case "home":
                return handleHome(player);
            case "list":
                return handleList(player);
            case "ally":
                return handleAlly(player, args);
            case "unally":
                return handleUnally(player, args);
            case "enemy":
                return handleEnemy(player, args);
            case "unenemy":
                return handleUnenemy(player, args);
            case "color":
                return handleColor(player, args);
            case "gui":
                return handleGUI(player);
            case "help":
            default:
                sendHelpMessage(player);
                return true;
        }
    }

    private boolean handleCreate(Player player, String[] args) {
        if (args.length < 2) {
            player.sendMessage(ChatColor.RED + "Usage: /clan create <name>");
            return true;
        }

        String clanName = args[1];

        // Check if player is already in a clan
        if (plugin.getStorageManager().getPlayerClan(player.getUniqueId()) != null) {
            player.sendMessage(ChatColor.RED + "You are already in a clan. Leave your current clan first.");
            return true;
        }

        // Check if clan name already exists
        if (plugin.getStorageManager().getClan(clanName) != null) {
            player.sendMessage(ChatColor.RED + "A clan with that name already exists!");
            return true;
        }

        // Create new clan
        Clan clan = new Clan(clanName);
        ClanMember member = new ClanMember(player.getUniqueId(), player.getName(), ClanRole.LEADER);
        clan.addMember(member);
        
        plugin.getStorageManager().addClan(clan);
        
        // Create and give clan flag
        ItemStack clanFlag = ItemUtils.createClanFlag(clanName);
        player.getInventory().addItem(clanFlag);
        
        player.sendMessage(ChatColor.GREEN + "You have created clan " + ChatColor.GOLD + clanName + ChatColor.GREEN + "!");
        return true;
    }

    private boolean handleJoin(Player player, String[] args) {
        if (args.length < 2) {
            player.sendMessage(ChatColor.RED + "Usage: /clan join <name>");
            return true;
        }

        String clanName = args[1];
        Clan clan = plugin.getStorageManager().getClan(clanName);

        // Check if clan exists
        if (clan == null) {
            player.sendMessage(ChatColor.RED + "No clan found with name: " + clanName);
            return true;
        }

        // Check if player is already in a clan
        if (plugin.getStorageManager().getPlayerClan(player.getUniqueId()) != null) {
            player.sendMessage(ChatColor.RED + "You are already in a clan. Leave your current clan first.");
            return true;
        }

        // Check if player is invited to this clan
        if (!clan.isInvited(player.getUniqueId())) {
            player.sendMessage(ChatColor.RED + "You need an invitation to join this clan.");
            return true;
        }

        // Add player to clan
        ClanMember member = new ClanMember(player.getUniqueId(), player.getName(), ClanRole.MEMBER);
        clan.addMember(member);
        clan.removeInvite(player.getUniqueId());
        
        player.sendMessage(ChatColor.GREEN + "You have joined clan " + ChatColor.GOLD + clanName + ChatColor.GREEN + "!");
        
        // Notify online clan members
        MessageUtils.notifyClan(clan, ChatColor.GREEN + player.getName() + " has joined the clan!");
        
        return true;
    }

    private boolean handleLeave(Player player) {
        Clan clan = plugin.getStorageManager().getPlayerClan(player.getUniqueId());
        
        // Check if player is in a clan
        if (clan == null) {
            player.sendMessage(ChatColor.RED + "You are not in a clan!");
            return true;
        }
        
        ClanMember member = clan.getMember(player.getUniqueId());
        
        // Check if player is the leader
        if (member.getRole() == ClanRole.LEADER) {
            player.sendMessage(ChatColor.RED + "As the leader, you cannot leave the clan. Transfer leadership first or disband the clan.");
            return true;
        }
        
        // Remove player from clan
        clan.removeMember(player.getUniqueId());
        player.sendMessage(ChatColor.GREEN + "You have left clan " + ChatColor.GOLD + clan.getName() + ChatColor.GREEN + "!");
        
        // Notify online clan members
        MessageUtils.notifyClan(clan, ChatColor.YELLOW + player.getName() + " has left the clan.");
        
        return true;
    }

    private boolean handleInfo(Player player, String[] args) {
        Clan clan;
        
        if (args.length >= 2) {
            // Get info for specified clan
            String clanName = args[1];
            clan = plugin.getStorageManager().getClan(clanName);
            
            if (clan == null) {
                player.sendMessage(ChatColor.RED + "No clan found with name: " + clanName);
                return true;
            }
        } else {
            // Get info for player's clan
            clan = plugin.getStorageManager().getPlayerClan(player.getUniqueId());
            
            if (clan == null) {
                player.sendMessage(ChatColor.RED + "You are not in a clan! Use /clan info <name> to view other clans.");
                return true;
            }
        }
        
        // Display clan info
        player.sendMessage(ChatColor.GOLD + "=== Clan Info: " + clan.getName() + " ===");
        player.sendMessage(ChatColor.YELLOW + "Tag: " + clan.getTag());
        player.sendMessage(ChatColor.YELLOW + "Members: " + clan.getMembers().size());
        
        player.sendMessage(ChatColor.YELLOW + "Leader: ");
        for (ClanMember member : clan.getMembers()) {
            if (member.getRole() == ClanRole.LEADER) {
                player.sendMessage(ChatColor.WHITE + "  - " + member.getPlayerName());
            }
        }
        
        player.sendMessage(ChatColor.YELLOW + "Officers: ");
        for (ClanMember member : clan.getMembers()) {
            if (member.getRole() == ClanRole.OFFICER) {
                player.sendMessage(ChatColor.WHITE + "  - " + member.getPlayerName());
            }
        }
        
        player.sendMessage(ChatColor.YELLOW + "Members: ");
        for (ClanMember member : clan.getMembers()) {
            if (member.getRole() == ClanRole.MEMBER) {
                player.sendMessage(ChatColor.WHITE + "  - " + member.getPlayerName());
            }
        }
        
        return true;
    }

    private boolean handleInvite(Player player, String[] args) {
        if (args.length < 2) {
            player.sendMessage(ChatColor.RED + "Usage: /clan invite <player>");
            return true;
        }
        
        String targetName = args[1];
        Player targetPlayer = plugin.getServer().getPlayer(targetName);
        
        if (targetPlayer == null) {
            player.sendMessage(ChatColor.RED + "Player not found or not online.");
            return true;
        }
        
        Clan clan = plugin.getStorageManager().getPlayerClan(player.getUniqueId());
        
        // Check if player is in a clan
        if (clan == null) {
            player.sendMessage(ChatColor.RED + "You are not in a clan!");
            return true;
        }
        
        ClanMember member = clan.getMember(player.getUniqueId());
        
        // Check if player has permission to invite
        if (member.getRole() == ClanRole.MEMBER) {
            player.sendMessage(ChatColor.RED + "Only clan leaders and officers can invite players.");
            return true;
        }
        
        // Check if target is already in a clan
        if (plugin.getStorageManager().getPlayerClan(targetPlayer.getUniqueId()) != null) {
            player.sendMessage(ChatColor.RED + targetPlayer.getName() + " is already in a clan.");
            return true;
        }
        
        // Add invite
        clan.addInvite(targetPlayer.getUniqueId());
        
        player.sendMessage(ChatColor.GREEN + "You have invited " + targetPlayer.getName() + " to join your clan.");
        targetPlayer.sendMessage(ChatColor.GREEN + "You have been invited to join clan " + 
                                ChatColor.GOLD + clan.getName() + 
                                ChatColor.GREEN + ". Use /clan join " + clan.getName() + " to accept.");
        
        return true;
    }

    private boolean handleKick(Player player, String[] args) {
        if (args.length < 2) {
            player.sendMessage(ChatColor.RED + "Usage: /clan kick <player>");
            return true;
        }
        
        String targetName = args[1];
        
        Clan clan = plugin.getStorageManager().getPlayerClan(player.getUniqueId());
        
        // Check if player is in a clan
        if (clan == null) {
            player.sendMessage(ChatColor.RED + "You are not in a clan!");
            return true;
        }
        
        ClanMember playerMember = clan.getMember(player.getUniqueId());
        
        // Check if player has permission to kick
        if (playerMember.getRole() == ClanRole.MEMBER) {
            player.sendMessage(ChatColor.RED + "Only clan leaders and officers can kick players.");
            return true;
        }
        
        // Find target member
        ClanMember targetMember = null;
        for (ClanMember member : clan.getMembers()) {
            if (member.getPlayerName().equalsIgnoreCase(targetName)) {
                targetMember = member;
                break;
            }
        }
        
        if (targetMember == null) {
            player.sendMessage(ChatColor.RED + "Player not found in your clan.");
            return true;
        }
        
        // Check if target has higher role
        if (targetMember.getRole().ordinal() <= playerMember.getRole().ordinal()) {
            player.sendMessage(ChatColor.RED + "You cannot kick members with equal or higher rank than you.");
            return true;
        }
        
        // Remove member from clan
        clan.removeMember(targetMember.getPlayerUUID());
        
        player.sendMessage(ChatColor.GREEN + "You have kicked " + targetMember.getPlayerName() + " from the clan.");
        
        // Notify target player if online
        Player targetPlayer = plugin.getServer().getPlayer(targetMember.getPlayerUUID());
        if (targetPlayer != null) {
            targetPlayer.sendMessage(ChatColor.RED + "You have been kicked from clan " + clan.getName() + ".");
        }
        
        // Notify online clan members
        MessageUtils.notifyClan(clan, ChatColor.YELLOW + targetMember.getPlayerName() + " has been kicked from the clan.");
        
        return true;
    }

    private boolean handlePromote(Player player, String[] args) {
        if (args.length < 2) {
            player.sendMessage(ChatColor.RED + "Usage: /clan promote <player>");
            return true;
        }
        
        String targetName = args[1];
        
        Clan clan = plugin.getStorageManager().getPlayerClan(player.getUniqueId());
        
        // Check if player is in a clan
        if (clan == null) {
            player.sendMessage(ChatColor.RED + "You are not in a clan!");
            return true;
        }
        
        ClanMember playerMember = clan.getMember(player.getUniqueId());
        
        // Check if player has permission to promote
        if (playerMember.getRole() != ClanRole.LEADER) {
            player.sendMessage(ChatColor.RED + "Only clan leaders can promote players.");
            return true;
        }
        
        // Find target member
        ClanMember targetMember = null;
        for (ClanMember member : clan.getMembers()) {
            if (member.getPlayerName().equalsIgnoreCase(targetName)) {
                targetMember = member;
                break;
            }
        }
        
        if (targetMember == null) {
            player.sendMessage(ChatColor.RED + "Player not found in your clan.");
            return true;
        }
        
        // Check if target is already an officer
        if (targetMember.getRole() == ClanRole.OFFICER) {
            player.sendMessage(ChatColor.RED + "This player is already an officer.");
            return true;
        }
        
        // Promote member
        targetMember.setRole(ClanRole.OFFICER);
        
        player.sendMessage(ChatColor.GREEN + "You have promoted " + targetMember.getPlayerName() + " to Officer.");
        
        // Notify target player if online
        Player targetPlayer = plugin.getServer().getPlayer(targetMember.getPlayerUUID());
        if (targetPlayer != null) {
            targetPlayer.sendMessage(ChatColor.GREEN + "You have been promoted to Officer in your clan.");
        }
        
        // Notify online clan members
        MessageUtils.notifyClan(clan, ChatColor.YELLOW + targetMember.getPlayerName() + " has been promoted to Officer.");
        
        return true;
    }

    private boolean handleDemote(Player player, String[] args) {
        if (args.length < 2) {
            player.sendMessage(ChatColor.RED + "Usage: /clan demote <player>");
            return true;
        }
        
        String targetName = args[1];
        
        Clan clan = plugin.getStorageManager().getPlayerClan(player.getUniqueId());
        
        // Check if player is in a clan
        if (clan == null) {
            player.sendMessage(ChatColor.RED + "You are not in a clan!");
            return true;
        }
        
        ClanMember playerMember = clan.getMember(player.getUniqueId());
        
        // Check if player has permission to demote
        if (playerMember.getRole() != ClanRole.LEADER) {
            player.sendMessage(ChatColor.RED + "Only clan leaders can demote players.");
            return true;
        }
        
        // Find target member
        ClanMember targetMember = null;
        for (ClanMember member : clan.getMembers()) {
            if (member.getPlayerName().equalsIgnoreCase(targetName)) {
                targetMember = member;
                break;
            }
        }
        
        if (targetMember == null) {
            player.sendMessage(ChatColor.RED + "Player not found in your clan.");
            return true;
        }
        
        // Check if target is already a member
        if (targetMember.getRole() == ClanRole.MEMBER) {
            player.sendMessage(ChatColor.RED + "This player is already a regular member.");
            return true;
        }
        
        // Demote member
        targetMember.setRole(ClanRole.MEMBER);
        
        player.sendMessage(ChatColor.GREEN + "You have demoted " + targetMember.getPlayerName() + " to Member.");
        
        // Notify target player if online
        Player targetPlayer = plugin.getServer().getPlayer(targetMember.getPlayerUUID());
        if (targetPlayer != null) {
            targetPlayer.sendMessage(ChatColor.YELLOW + "You have been demoted to Member in your clan.");
        }
        
        // Notify online clan members
        MessageUtils.notifyClan(clan, ChatColor.YELLOW + targetMember.getPlayerName() + " has been demoted to Member.");
        
        return true;
    }

    private boolean handleSetHome(Player player) {
        Clan clan = plugin.getStorageManager().getPlayerClan(player.getUniqueId());
        
        // Check if player is in a clan
        if (clan == null) {
            player.sendMessage(ChatColor.RED + "You are not in a clan!");
            return true;
        }
        
        ClanMember member = clan.getMember(player.getUniqueId());
        
        // Check if player has permission to set home
        if (member.getRole() == ClanRole.MEMBER) {
            player.sendMessage(ChatColor.RED + "Only clan leaders and officers can set the clan home.");
            return true;
        }
        
        // Set clan home
        Location location = player.getLocation();
        clan.setHome(location);
        
        player.sendMessage(ChatColor.GREEN + "Clan home has been set at your current location.");
        
        // Notify online clan members
        MessageUtils.notifyClan(clan, ChatColor.YELLOW + "Clan home has been updated by " + player.getName() + ".");
        
        return true;
    }

    private boolean handleHome(Player player) {
        Clan clan = plugin.getStorageManager().getPlayerClan(player.getUniqueId());
        
        // Check if player is in a clan
        if (clan == null) {
            player.sendMessage(ChatColor.RED + "You are not in a clan!");
            return true;
        }
        
        // Check if clan has a home set
        if (clan.getHome() == null) {
            player.sendMessage(ChatColor.RED + "Your clan does not have a home set yet.");
            return true;
        }
        
        // Teleport player to clan home
        player.teleport(clan.getHome());
        player.sendMessage(ChatColor.GREEN + "Teleported to clan home.");
        
        return true;
    }

    private boolean handleList(Player player) {
        Set<Clan> clans = plugin.getStorageManager().getAllClans();
        
        if (clans.isEmpty()) {
            player.sendMessage(ChatColor.YELLOW + "There are no clans created yet.");
            return true;
        }
        
        player.sendMessage(ChatColor.GOLD + "=== Clans List ===");
        for (Clan clan : clans) {
            player.sendMessage(ChatColor.YELLOW + "- " + clan.getName() + 
                              ChatColor.WHITE + " (" + clan.getMembers().size() + " members)");
        }
        
        return true;
    }
    
    private boolean handleAlly(Player player, String[] args) {
        if (args.length < 2) {
            player.sendMessage(ChatColor.RED + "Usage: /clan ally <clan name>");
            return true;
        }
        
        String targetClanName = args[1];
        Clan playerClan = plugin.getStorageManager().getPlayerClan(player.getUniqueId());
        
        // Check if player is in a clan
        if (playerClan == null) {
            player.sendMessage(ChatColor.RED + "You are not in a clan!");
            return true;
        }
        
        // Check if player has permission
        ClanMember member = playerClan.getMember(player.getUniqueId());
        if (member.getRole() != ClanRole.LEADER) {
            player.sendMessage(ChatColor.RED + "Only clan leaders can create alliances.");
            return true;
        }
        
        // Check if target clan exists
        Clan targetClan = plugin.getStorageManager().getClan(targetClanName);
        if (targetClan == null) {
            player.sendMessage(ChatColor.RED + "No clan found with name: " + targetClanName);
            return true;
        }
        
        // Check if trying to ally with own clan
        if (playerClan.getName().equalsIgnoreCase(targetClanName)) {
            player.sendMessage(ChatColor.RED + "You cannot ally with your own clan.");
            return true;
        }
        
        // Check if already allied
        if (playerClan.isAllied(targetClanName)) {
            player.sendMessage(ChatColor.RED + "You are already allied with " + targetClanName);
            return true;
        }
        
        // Add alliance
        playerClan.addAlliance(targetClanName);
        player.sendMessage(ChatColor.GREEN + "You have marked " + targetClanName + " as an ally. They will need to ally you back for a mutual alliance.");
        
        // Notify other clan's online members
        for (ClanMember targetMember : targetClan.getMembers()) {
            Player targetPlayer = plugin.getServer().getPlayer(targetMember.getPlayerUUID());
            if (targetPlayer != null && targetPlayer.isOnline()) {
                targetPlayer.sendMessage(ChatColor.GREEN + "Clan " + playerClan.getName() + " has marked your clan as an ally.");
            }
        }
        
        // Save changes
        plugin.getStorageManager().saveClan(playerClan);
        
        return true;
    }
    
    private boolean handleUnally(Player player, String[] args) {
        if (args.length < 2) {
            player.sendMessage(ChatColor.RED + "Usage: /clan unally <clan name>");
            return true;
        }
        
        String targetClanName = args[1];
        Clan playerClan = plugin.getStorageManager().getPlayerClan(player.getUniqueId());
        
        // Check if player is in a clan
        if (playerClan == null) {
            player.sendMessage(ChatColor.RED + "You are not in a clan!");
            return true;
        }
        
        // Check if player has permission
        ClanMember member = playerClan.getMember(player.getUniqueId());
        if (member.getRole() != ClanRole.LEADER) {
            player.sendMessage(ChatColor.RED + "Only clan leaders can remove alliances.");
            return true;
        }
        
        // Check if actually allied
        if (!playerClan.isAllied(targetClanName)) {
            player.sendMessage(ChatColor.RED + "You are not allied with " + targetClanName);
            return true;
        }
        
        // Remove alliance
        playerClan.removeAlliance(targetClanName);
        player.sendMessage(ChatColor.GREEN + "You are no longer allied with " + targetClanName);
        
        // Notify other clan's online members if they exist
        Clan targetClan = plugin.getStorageManager().getClan(targetClanName);
        if (targetClan != null) {
            for (ClanMember targetMember : targetClan.getMembers()) {
                Player targetPlayer = plugin.getServer().getPlayer(targetMember.getPlayerUUID());
                if (targetPlayer != null && targetPlayer.isOnline()) {
                    targetPlayer.sendMessage(ChatColor.YELLOW + "Clan " + playerClan.getName() + " has removed their alliance with your clan.");
                }
            }
        }
        
        // Save changes
        plugin.getStorageManager().saveClan(playerClan);
        
        return true;
    }
    
    private boolean handleEnemy(Player player, String[] args) {
        if (args.length < 2) {
            player.sendMessage(ChatColor.RED + "Usage: /clan enemy <clan name>");
            return true;
        }
        
        String targetClanName = args[1];
        Clan playerClan = plugin.getStorageManager().getPlayerClan(player.getUniqueId());
        
        // Check if player is in a clan
        if (playerClan == null) {
            player.sendMessage(ChatColor.RED + "You are not in a clan!");
            return true;
        }
        
        // Check if player has permission
        ClanMember member = playerClan.getMember(player.getUniqueId());
        if (member.getRole() != ClanRole.LEADER) {
            player.sendMessage(ChatColor.RED + "Only clan leaders can declare enemies.");
            return true;
        }
        
        // Check if target clan exists
        Clan targetClan = plugin.getStorageManager().getClan(targetClanName);
        if (targetClan == null) {
            player.sendMessage(ChatColor.RED + "No clan found with name: " + targetClanName);
            return true;
        }
        
        // Check if trying to enemy own clan
        if (playerClan.getName().equalsIgnoreCase(targetClanName)) {
            player.sendMessage(ChatColor.RED + "You cannot mark your own clan as an enemy.");
            return true;
        }
        
        // Check if already an enemy
        if (playerClan.isEnemy(targetClanName)) {
            player.sendMessage(ChatColor.RED + "You have already marked " + targetClanName + " as an enemy.");
            return true;
        }
        
        // Add enemy
        playerClan.addEnemy(targetClanName);
        player.sendMessage(ChatColor.GREEN + "You have marked " + targetClanName + " as an enemy.");
        
        // Notify other clan's online members
        for (ClanMember targetMember : targetClan.getMembers()) {
            Player targetPlayer = plugin.getServer().getPlayer(targetMember.getPlayerUUID());
            if (targetPlayer != null && targetPlayer.isOnline()) {
                targetPlayer.sendMessage(ChatColor.RED + "Warning: Clan " + playerClan.getName() + " has marked your clan as an enemy!");
            }
        }
        
        // Save changes
        plugin.getStorageManager().saveClan(playerClan);
        
        return true;
    }
    
    private boolean handleUnenemy(Player player, String[] args) {
        if (args.length < 2) {
            player.sendMessage(ChatColor.RED + "Usage: /clan unenemy <clan name>");
            return true;
        }
        
        String targetClanName = args[1];
        Clan playerClan = plugin.getStorageManager().getPlayerClan(player.getUniqueId());
        
        // Check if player is in a clan
        if (playerClan == null) {
            player.sendMessage(ChatColor.RED + "You are not in a clan!");
            return true;
        }
        
        // Check if player has permission
        ClanMember member = playerClan.getMember(player.getUniqueId());
        if (member.getRole() != ClanRole.LEADER) {
            player.sendMessage(ChatColor.RED + "Only clan leaders can remove enemy status.");
            return true;
        }
        
        // Check if actually an enemy
        if (!playerClan.isEnemy(targetClanName)) {
            player.sendMessage(ChatColor.RED + targetClanName + " is not marked as an enemy.");
            return true;
        }
        
        // Remove enemy
        playerClan.removeEnemy(targetClanName);
        player.sendMessage(ChatColor.GREEN + "You have removed " + targetClanName + " from your enemies list.");
        
        // Notify other clan's online members if they exist
        Clan targetClan = plugin.getStorageManager().getClan(targetClanName);
        if (targetClan != null) {
            for (ClanMember targetMember : targetClan.getMembers()) {
                Player targetPlayer = plugin.getServer().getPlayer(targetMember.getPlayerUUID());
                if (targetPlayer != null && targetPlayer.isOnline()) {
                    targetPlayer.sendMessage(ChatColor.GREEN + "Clan " + playerClan.getName() + " has removed your clan from their enemies list.");
                }
            }
        }
        
        // Save changes
        plugin.getStorageManager().saveClan(playerClan);
        
        return true;
    }
    
    private boolean handleColor(Player player, String[] args) {
        if (args.length < 2) {
            player.sendMessage(ChatColor.RED + "Usage: /clan color <color>");
            player.sendMessage(ChatColor.RED + "Available colors: RED, BLUE, GREEN, YELLOW, PURPLE, AQUA, GOLD, BLACK, WHITE");
            return true;
        }
        
        String colorName = args[1].toUpperCase();
        Clan playerClan = plugin.getStorageManager().getPlayerClan(player.getUniqueId());
        
        // Check if player is in a clan
        if (playerClan == null) {
            player.sendMessage(ChatColor.RED + "You are not in a clan!");
            return true;
        }
        
        // Check if player has permission
        ClanMember member = playerClan.getMember(player.getUniqueId());
        if (member.getRole() != ClanRole.LEADER) {
            player.sendMessage(ChatColor.RED + "Only clan leaders can change clan color.");
            return true;
        }
        
        // Map color name to ChatColor
        ChatColor color;
        try {
            color = ChatColor.valueOf(colorName);
        } catch (IllegalArgumentException e) {
            player.sendMessage(ChatColor.RED + "Invalid color. Available colors: RED, BLUE, GREEN, YELLOW, PURPLE, AQUA, GOLD, BLACK, WHITE");
            return true;
        }
        
        // Set clan color
        playerClan.setColor(color.toString());
        player.sendMessage(ChatColor.GREEN + "Clan color set to " + color + colorName);
        
        // Notify clan members
        MessageUtils.notifyClan(playerClan, "Clan color has been changed to " + color + colorName);
        
        // Save changes
        plugin.getStorageManager().saveClan(playerClan);
        
        return true;
    }

    private void sendHelpMessage(Player player) {
        player.sendMessage(ChatColor.GOLD + "=== Clan Commands ===");
        player.sendMessage(ChatColor.YELLOW + "/clan create <name>" + ChatColor.WHITE + " - Create a new clan");
        player.sendMessage(ChatColor.YELLOW + "/clan join <name>" + ChatColor.WHITE + " - Join a clan (requires invitation)");
        player.sendMessage(ChatColor.YELLOW + "/clan leave" + ChatColor.WHITE + " - Leave your current clan");
        player.sendMessage(ChatColor.YELLOW + "/clan info [name]" + ChatColor.WHITE + " - View clan information");
        player.sendMessage(ChatColor.YELLOW + "/clan invite <player>" + ChatColor.WHITE + " - Invite a player to your clan");
        player.sendMessage(ChatColor.YELLOW + "/clan kick <player>" + ChatColor.WHITE + " - Kick a player from your clan");
        player.sendMessage(ChatColor.YELLOW + "/clan promote <player>" + ChatColor.WHITE + " - Promote a member to officer");
        player.sendMessage(ChatColor.YELLOW + "/clan demote <player>" + ChatColor.WHITE + " - Demote an officer to member");
        player.sendMessage(ChatColor.YELLOW + "/clan sethome" + ChatColor.WHITE + " - Set your clan's home location");
        player.sendMessage(ChatColor.YELLOW + "/clan home" + ChatColor.WHITE + " - Teleport to your clan's home");
        player.sendMessage(ChatColor.YELLOW + "/clan list" + ChatColor.WHITE + " - List all clans on the server");
        player.sendMessage(ChatColor.YELLOW + "/c <message>" + ChatColor.WHITE + " - Send a message to clan chat");
    }
    
    private boolean handleGUI(Player player) {
        Clan playerClan = plugin.getStorageManager().getPlayerClan(player.getUniqueId());
        
        // Check if player is in a clan
        if (playerClan == null) {
            player.sendMessage(ChatColor.RED + "You are not in a clan!");
            return true;
        }
        
        // Create inventory for GUI (6 rows of 9 slots)
        Inventory gui = plugin.getServer().createInventory(player, 54, ChatColor.DARK_PURPLE + "Clan Management");
        
        // Add glass pane border
        ItemUtils.createGuiBorder(gui, Material.PURPLE_STAINED_GLASS_PANE);
        
        // Clan Information Section
        List<String> clanInfo = new ArrayList<>();
        clanInfo.add("Name: " + ChatColor.GOLD + playerClan.getName());
        clanInfo.add("Tag: " + ChatColor.AQUA + "[" + playerClan.getTag() + "]");
        clanInfo.add("Members: " + ChatColor.GREEN + playerClan.getMembers().size());
        
        // If the clan has a home, add it to the info
        if (playerClan.getHome() != null) {
            Location home = playerClan.getHome();
            clanInfo.add("Home: " + ChatColor.YELLOW + "X: " + home.getBlockX() + 
                         ", Y: " + home.getBlockY() + 
                         ", Z: " + home.getBlockZ());
        }
        
        // Create clan info item
        ItemStack clanInfoItem = ItemUtils.createInfoItem(
            Material.BOOK, 
            ChatColor.GOLD + "Clan Information", 
            clanInfo
        );
        gui.setItem(4, clanInfoItem);
        
        // Create member management item
        List<String> memberLore = new ArrayList<>();
        memberLore.add("");
        memberLore.add(ChatColor.GRAY + "Click to see all clan members");
        memberLore.add(ChatColor.GRAY + "and manage their roles.");
        ItemStack membersItem = ItemUtils.createGuiItem(
            Material.PLAYER_HEAD, 
            ChatColor.AQUA + "Manage Members", 
            memberLore
        );
        gui.setItem(20, membersItem);
        
        // Create clan home item
        List<String> homeLore = new ArrayList<>();
        homeLore.add("");
        if (playerClan.getHome() != null) {
            homeLore.add(ChatColor.GRAY + "Click to teleport to your clan home.");
            homeLore.add("");
            homeLore.add(ChatColor.YELLOW + "Current location:");
            Location home = playerClan.getHome();
            homeLore.add(ChatColor.YELLOW + "X: " + home.getBlockX() + 
                         ", Y: " + home.getBlockY() + 
                         ", Z: " + home.getBlockZ());
        } else {
            homeLore.add(ChatColor.GRAY + "Your clan doesn't have a home yet.");
            homeLore.add(ChatColor.GRAY + "Use /clan sethome to set one.");
        }
        ItemStack homeItem = ItemUtils.createGuiItem(
            Material.COMPASS, 
            ChatColor.GREEN + "Clan Home", 
            homeLore
        );
        gui.setItem(22, homeItem);
        
        // Create alliance management item
        List<String> allyLore = new ArrayList<>();
        allyLore.add("");
        allyLore.add(ChatColor.GRAY + "Click to view and manage");
        allyLore.add(ChatColor.GRAY + "your clan's alliances.");
        allyLore.add("");
        allyLore.add(ChatColor.AQUA + "Current allies: " + playerClan.getAlliances().size());
        ItemStack allyItem = ItemUtils.createGuiItem(
            Material.BLUE_BANNER, 
            ChatColor.BLUE + "Alliances", 
            allyLore
        );
        gui.setItem(24, allyItem);
        
        // Create enemy management item
        List<String> enemyLore = new ArrayList<>();
        enemyLore.add("");
        enemyLore.add(ChatColor.GRAY + "Click to view and manage");
        enemyLore.add(ChatColor.GRAY + "your clan's enemies.");
        enemyLore.add("");
        enemyLore.add(ChatColor.RED + "Current enemies: " + playerClan.getEnemies().size());
        ItemStack enemyItem = ItemUtils.createGuiItem(
            Material.RED_BANNER, 
            ChatColor.RED + "Enemies", 
            enemyLore
        );
        gui.setItem(31, enemyItem);
        
        // Create clan color settings item
        List<String> colorLore = new ArrayList<>();
        colorLore.add("");
        colorLore.add(ChatColor.GRAY + "Click to change your clan's color.");
        colorLore.add("");
        colorLore.add(ChatColor.GRAY + "Current color: " + playerClan.getColor() + "■");
        ItemStack colorItem = ItemUtils.createGuiItem(
            Material.LEATHER_CHESTPLATE, 
            ChatColor.LIGHT_PURPLE + "Clan Color", 
            colorLore
        );
        gui.setItem(38, colorItem);
        
        // Create clan flag item
        ItemStack flagItem = ItemUtils.createClanFlag(playerClan.getName());
        gui.setItem(40, flagItem);
        
        // Create clan settings item
        List<String> settingsLore = new ArrayList<>();
        settingsLore.add("");
        settingsLore.add(ChatColor.GRAY + "Click to access additional");
        settingsLore.add(ChatColor.GRAY + "clan settings and options.");
        ItemStack settingsItem = ItemUtils.createGuiItem(
            Material.REDSTONE_COMPARATOR, 
            ChatColor.GOLD + "Clan Settings", 
            settingsLore
        );
        gui.setItem(42, settingsItem);
        
        // Open the GUI for the player
        player.openInventory(gui);
        return true;
    }
}
